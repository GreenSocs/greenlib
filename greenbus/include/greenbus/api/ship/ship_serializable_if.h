// LICENSETEXT
// 
//   Copyright (C) 2007 : GreenSocs Ltd
//       http://www.greensocs.com/ , email: info@greensocs.com
// 
//   Developed by :
// 
//   Wolfgang Klingauf, Robert Guenzel
//     Technical University of Braunschweig, Dept. E.I.S.
//     http://www.eis.cs.tu-bs.de
// 
//   Mark Burton, Marcus Bartholomeu
//     GreenSocs Ltd
// 
// 
//   This program is free software.
// 
//   If you have no applicable agreement with GreenSocs Ltd, this software
//   is licensed to you, and you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
// 
//   If you have a applicable agreement with GreenSocs Ltd, the terms of that
//   agreement prevail.
// 
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
// 
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
//   02110-1301  USA 
// 
// ENDLICENSETEXT

#ifndef __ship_serializable_if_h__
#define __ship_serializable_if_h__

#include "ship_datatypes.h"

namespace tlm {

//---------------------------------------------------------------------------
/**
 * This is an abstract class from which objects must inherit to be 
 * SHIP-transferrable.
 */
//---------------------------------------------------------------------------
class ship_serializable_if
{
public:
  
   /// Create a byte vector that represents the information content of this SHIP object.
   /**
    * This method has to be implemented by any SHIP object.
    * It should convert the information carried by this SHIP object
    * into a serial byte vector representation.
    * The deserialize method should be able to reconstruct a SHIP object
    * which has the same information content than this SHIP object 
    * from this byte vector.
    *
    * @return the number of bytes allocated in the byte vector.
    * @param data is a GSDataType into which the serial byte stream is to be copied.
    */
   virtual const gs_uint32 serialize(GSDataType &data) =0;

   /// Restore the information content of a SHIP content from a serial data stream.
   /**
    * This method has to be implemented by any SHIP object.
    * Its purpose is to read a serial data stream which was 
    * generated by the serialize method, and to copy the information content
    * of this data stream into the corresponding data fields
    * of this SHIP object.
    * 
    * @param data is a GSDataType that carries a serialized SHIP object. 
    * @return the number of bytes deserialized from the serial data stream.
    */
   virtual const gs_uint32 deserialize(GSDataType &data) =0;

   /// This method returns the number of bytes that would be allocated in a byte vector if the serialize method now would be invoked.
   /**
    * @return The number of bytes the serialize method would allocate if it would be invoked now.
    */
   virtual const gs_uint32 getSerialLength() =0;

  virtual ~ship_serializable_if() {}
     
};

} // namespace tlm

#endif
